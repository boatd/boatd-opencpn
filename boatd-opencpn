#!/usr/bin/env python

import datetime
import math
import socket
import sys
import time

import boatdclient


def calculate_checksum(line):
    '''Return the NMEA checksum for a given line'''
    x = 0
    for c in line:
        x ^= ord(c)
    s = str(hex(x))[2:]
    return ('0' if len(s) < 2 else '') + s.upper()


def nmea_line(line):
    checksum = calculate_checksum(line)
    return '$' + line + '*' + checksum


def degrees_to_nmea(input_degrees):
    degrees = math.trunc(input_degrees)
    minutes = (input_degrees - degrees) * 60
    return '{}{:.3g}'.format(degrees, abs(minutes))


def hdm(heading):
    '''Return a HDM nmea sentance from a given heading'''
    line = 'GPHDM,{0:.3g},M'.format(heading)
    return nmea_line(line)


def gll(latitude, longitude, utc_datetime):
    '''
    Return a GLL nmea sentance from a lat, long and date (datetime object).
    '''
    centisecond = str(utc_datetime.microsecond)[:2]
    t = utc_datetime.strftime('%H%M%S.') + centisecond
    lat_direction = 'N' if latitude > 0 else 'S'  # noqa
    lon_direction = 'E' if longitude > 0 else 'W'  # noqa
    line = 'GPGLL,{lat},{lat_dir},{lon},{lon_dir},{time},A'.format(
        lat=degrees_to_nmea(abs(latitude)),
        lon=degrees_to_nmea(abs(longitude)),
        lat_dir=lat_direction,
        lon_dir=lon_direction,
        time=t)
    return nmea_line(line)


def send_nmea_message(sock, message, dest):
    message = message + u"\r\n"
    sock.sendto(message.encode("utf-8"), dest)


def main(ip, port, delay):
    sock = socket.socket(socket.AF_INET,
                         socket.SOCK_DGRAM)

    boat = boatdclient.Boat(auto_update=False)

    while True :
        try:
            boat.update()

            location = boat.position
            message = gll(location.lat,
                          location.long,
                          datetime.datetime.now())
            send_nmea_message(sock, message, (ip, port))

            message = hdm(float(boat.heading))
            send_nmea_message(sock, message, (ip, port))

            time.sleep(delay)
        except KeyboardInterrupt:
            sock.close()
            sys.exit()
        except Exception as msg:
            print(msg)
            sock.close()
            sys.exit()

if __name__ == '__main__':
    main('127.0.0.1', 10110, 0.2)
